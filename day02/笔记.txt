HEAD:
	就是存盘点,实行版本控制
	git将每一次的提交串成一条时间线,这条时间线就是一条分支,默认只有一条分支,master,也叫做主分支
	而HEAD指向的就是当前分支

分支:
	1.创建分支
		git branch 新分支名称
		将当前所在的分支复制一条新的分支出来
	2.查看当前所有分支
		git branch 
		其中前面有*的表示当前所在分支
	3.切换到某一条分支
		git checkout 分支名
		切换到指定名称的分支上
		*其他分支上的修改,不会影响别的分支上的内容

	4.删除分支
		git branch -d 分支名:
		只能删除已经合并过的分支,如果分支中有新的提交没有合并,则删除失败
		不能删除当前所在分支
		如果要强制删除未合并分支,则使用
		git branch -D 分支名

	5.分支的合并
		git merge 分支名
		将指定名称的分支内容的修改,合并到当前分支中
		在master分支,使用git merge v1,则是将v1的内容合并到master上,
		v1的内容不会变化,master内容发生改变


	练习:
		先提交master分支的内容
		在master分支上,复制2条新的分支出来
		v1.1,v1.2
		切换到v1.1查看v1.1的内容
		再切换到v1.2查看v1.2的内容
		删除v1.2中文件的所有数据,提交保存
		再切换回v1.1查看v1.1中的数据是否还在
		切换回master,检查master中的数据是否存在

	练习:
		新建文件夹lianxi,并初始化为仓库
		新建文件1.txt,并输入内容"新建文件",提交
		复制分支v1,查看当前有哪些分支
		切换到v1分支,将1.txt内容修改为v1分支的修改,提交
		切换到master分支,查看master分支的内容是否变化
		将v1的修改合并到master分支,查看提交日志及内容
		删除v1
		复制v2分支
		修改master分支中的1.txt内容,提交
		切换到v2分支,查看v2内容是否和master一致
		将master内容合并到v2中,再次查看v2与master内容是否一致

git status 
git add -A 忽略空文件夹

	仓库中,如果新建空文件夹/删除空文件夹,仓库的状态不会发生变化
	新建的文件如果没有被纳入到git的控制中,切换分支对其不会有任何影响.
	合并分支时,必须保证分支已经处于nothing to commit的状态
	合并时,主动合并的分支的最新提交点,如果能在被合并的分支中找到,则可以正常自动合并完成.
	如果找不到,则自动合成失败,需要手动处理

GitHub社区
	1.注册账号
	2.创建远程仓库
		点击右上角 + , 选择 new repository
		在repository name  中填入远程仓库的名称
		点击create
	3.将本地仓库的内容推送给远程仓库
		分两步:
		先将本地仓库与远程仓库关联
		git remote add origin 远程仓库地址
		关联远程仓库只需要第一次执行,以后就不需要了

		origin表示远程地址仓库的别名,方便以后使用

		将本地仓库内容推送给远程仓库
		git push -u origin master 

		-u表示第一次推送给远程仓库,第二次以后就不需要添加了
		origin:关联远程仓库时起的别名,指代远程仓库地址